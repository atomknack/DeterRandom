//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Seed_NewtonJson
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using Newtonsoft.Json;
using System;
using System.Collections.Concurrent;

namespace DeterRandom.Seeds;

[JsonConverter(typeof(NewtonJson_SplitMix64))]
public readonly partial struct SplitMix64
{
    //Thread safe implemenatation with pool(bag) for temp json objects  
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    //change to internal if needed for testing 
    private class NewtonJson_SplitMix64 : JsonConverter<SplitMix64>
    {
        //to check that no memory leaks change this class and static field to internal and uncomment counter in AfterEveryTest() in test project.
        private static readonly ConcurrentBag<NewtonJson_SplitMix64> s_pool = new ConcurrentBag<NewtonJson_SplitMix64>();
        
        [JsonRequired]
        public long s0;

        private static NewtonJson_SplitMix64 FromPool() =>
            s_pool.TryTake(out NewtonJson_SplitMix64 o) ? o : new NewtonJson_SplitMix64();
        private static void ReturnToPool(NewtonJson_SplitMix64 o) => 
            s_pool.Add(o);
        public override void WriteJson(JsonWriter writer, SplitMix64 value, JsonSerializer serializer)
        {
            NewtonJson_SplitMix64 o = FromPool();
            unchecked
            {
                o.s0 = (long)value._s0;
            }

            serializer.Serialize(writer, o);
            ReturnToPool(o);
        }

        public override SplitMix64 ReadJson(JsonReader reader, Type objectType, SplitMix64 existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            //NewtonJson_SplitMix64 o = serializer.Deserialize<NewtonJson_SplitMix64>(reader);
            NewtonJson_SplitMix64 o = FromPool();
            serializer.Populate(reader, o);
            SplitMix64 result = unchecked(new SplitMix64((ulong)o.s0));
            ReturnToPool(o);
            return result;
        }
    }
}

