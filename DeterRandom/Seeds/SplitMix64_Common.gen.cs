//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Seed_Common
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;

namespace DeterRandom.Seeds;

public readonly partial struct SplitMix64
{
    private readonly ulong _s0;

    public void NextSaltedSeed(out SplitMix64 nextSeedPlaceholder, ulong salt)
    {
        ulong s0 = _s0;
        NextSeed(ref s0);
        SaltMaker.SaltSplitMix64(ref s0, SaltMaker.ValueToSalty(salt));
        nextSeedPlaceholder = new SplitMix64(s0);
    }

    public void NextSeed(out SplitMix64 nextSeedPlaceholder)
    {
            ulong s0 = _s0;
        NextSeed(ref s0);
        //SaltMaker.SaltSplitMix64(ref s0, SaltMaker.ValueToSalty(salt));
        nextSeedPlaceholder = new SplitMix64(s0);
    }

    public SplitMix64 CreateIdenticalCopy() => 
        new SplitMix64(_s0);

    private SplitMix64(ulong s0)
    {
        _s0 = s0;
    }

    public bool Equals(SplitMix64 other) => _s0 == other._s0;
    public override bool Equals(object obj) => obj is SplitMix64 otherSeed && Equals(otherSeed);
    public override int GetHashCode() => _s0.GetHashCode();
    public override string ToString() => $"(s0:{ _s0 })";

}



