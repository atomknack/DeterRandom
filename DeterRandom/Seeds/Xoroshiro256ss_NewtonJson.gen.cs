//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Seed_NewtonJson
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using Newtonsoft.Json;
using System;
using System.Collections.Concurrent;

namespace DeterRandom.Seeds;

[JsonConverter(typeof(NewtonJson_Xoroshiro256ss))]
public readonly partial struct Xoroshiro256ss
{
    //Thread safe implemenatation with pool(bag) for temp json objects  
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    //change to internal if needed for testing 
    private class NewtonJson_Xoroshiro256ss : JsonConverter<Xoroshiro256ss>
    {
        //to check that no memory leaks change this class and static field to internal and uncomment counter in AfterEveryTest() in test project.
        private static readonly ConcurrentBag<NewtonJson_Xoroshiro256ss> s_pool = new ConcurrentBag<NewtonJson_Xoroshiro256ss>();
        
        [JsonRequired]
        public long s0;
        [JsonRequired]
        public long s1;
        [JsonRequired]
        public long s2;
        [JsonRequired]
        public long s3;

        private static NewtonJson_Xoroshiro256ss FromPool() =>
            s_pool.TryTake(out NewtonJson_Xoroshiro256ss o) ? o : new NewtonJson_Xoroshiro256ss();
        private static void ReturnToPool(NewtonJson_Xoroshiro256ss o) => 
            s_pool.Add(o);
        public override void WriteJson(JsonWriter writer, Xoroshiro256ss value, JsonSerializer serializer)
        {
            NewtonJson_Xoroshiro256ss o = FromPool();
            unchecked
            {
                o.s0 = (long)value._s0;
                o.s1 = (long)value._s1;
                o.s2 = (long)value._s2;
                o.s3 = (long)value._s3;
            }

            serializer.Serialize(writer, o);
            ReturnToPool(o);
        }

        public override Xoroshiro256ss ReadJson(JsonReader reader, Type objectType, Xoroshiro256ss existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            //NewtonJson_Xoroshiro256ss o = serializer.Deserialize<NewtonJson_Xoroshiro256ss>(reader);
            NewtonJson_Xoroshiro256ss o = FromPool();
            serializer.Populate(reader, o);
            Xoroshiro256ss result = unchecked(new Xoroshiro256ss((ulong)o.s0, (ulong)o.s1, (ulong)o.s2, (ulong)o.s3));
            ReturnToPool(o);
            return result;
        }
    }
}

